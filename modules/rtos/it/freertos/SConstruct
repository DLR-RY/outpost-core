#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2013-2017, German Aerospace Center (DLR)
#
# This file is part of the development version of OUTPOST.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Authors:
# - 2013-2017, Fabian Greif (DLR RY-AVS)

import os

# root folder of the outpost library
rootpath = os.path.abspath('../../../../')
modulepath  = os.path.join(rootpath, 'modules')
buildfolder = os.path.join(rootpath, 'build')

# path to the xpcc root directory
# TODO: don't use a absolute path here!
xpccpath = '/home/user/development/xpcc'

envGlobal = Environment(
    toolpath=[os.path.join(rootpath, '../scons-build-tools/site_tools')],
    tools=[
        'compiler_arm_none_eabi_gcc',
        'settings_buildpath',
        'utils_buildformat',
        'utils_buildsize'
    ],
    OS='freertos',
    BOARD='stm32f4discovery',
    CCFLAGS_target=[
        '-mcpu=cortex-m4',
        '-mthumb',
        '-mthumb-interwork',
        '-mfloat-abi=softfp',
        '-mfpu=fpv4-sp-d16',
        '-nostdlib',
    ],
    CCFLAGS_debug=['-gdwarf-2'],
    CCFLAGS_other=[
        '-finline-limit=10000',
        '-funsigned-char',
        '-funsigned-bitfields',
        '-fno-split-wide-types',
        '-fno-move-loop-invariants',
        '-fno-tree-loop-optimize',
        '-fno-unwind-tables',
    ],
    CXXFLAGS_other=[
        '-fno-threadsafe-statics',
        '-fuse-cxa-atexit',
    ],
    ENV=os.environ)

envGlobal['BASEPATH']  = os.path.abspath('.')
envGlobal['BUILDPATH'] = os.path.abspath(os.path.join(buildfolder, 'rtos/test/freertos'))

envGlobal.Append(CPPPATH=[
    '.',
    os.path.abspath(os.path.join(modulepath, 'support/default')),
    os.path.abspath(xpccpath + '/ext'),    # for FreeRTOS
])

envGlobal.SConscript(os.path.join(rootpath, 'SConscript.library'), exports='envGlobal')

env = envGlobal.Clone()

# Combine all libraries into one
files = []
for lib in env['objects']:
    for f in env['objects'][lib]:
        files.extend(f)

library = env.StaticLibrary('outpost', files)
envGlobal.Alias('library', library)

env = Environment(
    tools= ['xpcc'],
    toolpath = [xpccpath + '/scons/site_tools'],
    BUILDPATH = envGlobal['BUILDPATH'],
    XPCC_BUILDPATH = envGlobal['BUILDPATH'])

env.Append(CPPPATH=['../reference'])

# find all source files
files  = env.FindFiles('.')
files += env.Glob('../reference/*.cpp')

program = env.Program(target=env['XPCC_CONFIG']['general']['name'], source=files.sources + library)

env.Append(LIBS=['outpost', 'nosys'])
env.Append(LIBPATH=['$BUILDPATH'])

env.Append(CPPPATH=[
    modulepath + '/utils/src',
    modulepath + '/time/src',
    modulepath + '/rtos/src',
    modulepath + '/rtos/arch/freertos',
    modulepath + '/smpc/src',
])

# build the xpcc library
env.XpccLibrary()
env.Defines()

env.Alias('size', env.Size(program))
env.Alias('symbols', env.Symbols(program))
env.Alias('defines', env.ShowDefines())

hexfile = env.Hex(program)

env.Alias('program', env.OpenOcd(program))
env.Alias('build', [hexfile, env.Listing(program)])
env.Alias('all', ['build', 'size'])

env.Default('build')
